generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feedback {
  id        String   @id @default(cuid())
  name      String?
  content   String
  source    String?
  createdAt DateTime @default(now())
  status    String   @default("new")

  @@map("feedbacks")
}

model User {
  id        String            @id
  name      String?
  email     String            @unique
  image     String?
  role      String            @default("user")
  locale    String            @default("zh-CN")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    String            @default("active")
  favorites WebsiteFavorite[]
  likes     WebsiteLike[]
  reviews   WebsiteReview[]
  websites  Website[]

  @@map("users")
}

model Website {
  id                   Int               @id @default(autoincrement())
  title                String
  slug                 String            @unique
  url                  String            @unique
  description          String
  category_id          Int // 保留旧字段，系统不再使用
  thumbnail            String?
  status               String            @default("pending")
  visits               Int               @default(0)
  likes                Int               @default(0)
  active               Int               @default(1)
  quality_score        Int               @default(50)
  is_trusted           Boolean           @default(false)
  is_featured          Boolean           @default(false)
  weight               Int               @default(1)
  tags                 String[]          @default([])
  email                String?
  tagline              String?
  features             Json?             @default("[]")
  pricing_model        String            @default("free")
  has_free_version     Boolean           @default(false)
  base_price           String?
  twitter_url          String?
  domain_authority     Int?
  last_checked         DateTime?
  response_time        Int?
  ssl_enabled          Boolean           @default(true)
  submittedBy          String?
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  alternatives         Json?             @default("[]")
  api_available        Boolean           @default(false)
  changelog            String?
  detailed_description String?
  discord_url          String?
  faq                  Json?             @default("[]")
  github_url           String?
  integrations         Json?             @default("[]")
  languages_supported  Json?             @default("[]")
  linkedin_url         String?
  logo_url             String?
  pros_cons            Json?             @default("{}")
  screenshots          Json?             @default("[]")
  supported_platforms  Json?             @default("[]")
  target_audience      Json?             @default("[]")
  use_cases            Json?             @default("[]")
  video_url            String?
  android_app_url      String?
  desktop_platforms    Json?             @default("[]")
  facebook_url         String?
  instagram_url        String?
  ios_app_url          String?
  pricing_plans        Json?             @default("[]")
  web_app_url          String?
  youtube_url          String?
  websiteFavorites     WebsiteFavorite[]
  websiteLikes         WebsiteLike[]
  websiteReviews       WebsiteReview[]
  websiteCategories    WebsiteCategory[] // 新增：多对多关系
  category             Category          @relation(fields: [category_id], references: [id])
  submitter            User?             @relation(fields: [submittedBy], references: [id])

  @@index([category_id])
  @@index([status])
  @@index([quality_score])
  @@index([is_trusted])
  @@index([is_featured])
  @@index([submittedBy])
  @@index([pricing_model])
  @@index([has_free_version])
  @@index([slug])
  @@map("websites")
}

model WebsiteLike {
  id        String   @id @default(cuid())
  userId    String
  websiteId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([userId, websiteId])
  @@map("website_likes")
}

model WebsiteFavorite {
  id        String   @id @default(cuid())
  userId    String
  websiteId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([userId, websiteId])
  @@map("website_favorites")
}

model WebsiteReview {
  id        String   @id @default(cuid())
  userId    String
  websiteId Int
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([userId, websiteId])
  @@index([websiteId])
  @@index([rating])
  @@map("website_reviews")
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String
  slug              String            @unique
  name_en           String?
  name_zh           String?
  parent_id         Int?
  sort_order        Int               @default(0)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  websites          Website[]
  websiteCategories WebsiteCategory[] // 新增：多对多关系
  parent            Category?         @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children          Category[]        @relation("CategoryHierarchy")

  @@index([slug])
  @@index([parent_id])
  @@map("categories")
}

// 新增：多对多关系中间表
model WebsiteCategory {
  id         Int      @id @default(autoincrement())
  websiteId  Int
  categoryId Int
  isPrimary  Boolean  @default(false) // 标记主分类
  createdAt  DateTime @default(now())
  website    Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([websiteId, categoryId])
  @@index([websiteId])
  @@index([categoryId])
  @@index([isPrimary])
  @@map("website_categories")
}

model FooterLink {
  id         Int      @id @default(autoincrement())
  title      String
  url        String   @unique
  isExternal Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([url])
  @@map("footer_links")
}
